---
layout:     post
title:      "Machine Learning is fan! :)"
date:       2017-02-18 22:00:00
author:     "Malkevych Roman - rmalkevy"
---

## Machine learning is fun)

Ви чули, як люди говорять про машинне навчання, але мають зовсім нечітке уявлення про те, що це означає? Ви втомилися кивати носом під час розмов з колегами? Давайте змінимо це!
Ця інструкція призначена для тих, хто цікавиться машинним навчанням, але не має ні найменшого уявлення, з чого почати. Я вважаю, що є багато людей, які намагалися читати статтю у Вікіпедії, отримали розчарування і відмовилися від прохання про надання більш кращого пояснення. Ось що це таке.
Мета бути доступною для всіх - це означає, що є багато узагальнень. Але кого це хвилює? Якщо це стає хто більше зацікавлений в ML, то місія виконана.

### Що таке машинне навчання?
Машинне навчання це ідея про те, що існують загальні алгоритми, які можуть розповісти вам дещо цікаве про набір даних без необхідності писати будь-який призначений для користувача код, специфічний для даної проблеми. Замість того, щоб писати код, ви пропускаєте дані в загальний алгоритм і він будує свою власну логіку на основі даних.

![Image](https://cdn-images-1.medium.com/max/800/1*YXiclXZdJQVJZ0tQHCv5zw.png)

Наприклад, одним з видів таких алгоритмів є алгоритм класифікації. Він може помістити дані в різні групи. Один і той же алгоритм класифікації використовується для розпізнавання рукописних чисел та може бути використаний для класифікації повідомлень електронної пошти на спам і не-спам, при цьому не змінюється жоден рядок коду алгоритму. Це той же алгоритм, але накормлений різними тренувальними даними, тому результат приходить з різною логікою класифікації.

"Машинне навчання" - це узагальнюючий термін, який охоплює безліч видів подібних  алгоритмів.

### Два види алгоритмів машинного навчання. 
Ви можете думати про алгоритми машинного навчання, які зазначені в одній з двох основних категорій - навчання з вчителем (на основі прецедентів) і навчання без вчителя (english - supervised learning and unsupervised learning). Різниця проста, але насправді важлива.

### Навчання з вчителем (навчання на прецедентах)
Припустимо, ви агент з нерухомості. Ваш бізнес зростає, так що ви наймаєте купу нових учнів агентів, щоб вони допомагали вам. Але є одна проблема - ви можете поглянути на будинок і мати досить гарне уявлення про те, що будинок вартує, але учні не мають вашого досвіду, а тому вони не знають, як оцінити свої будинки. Щоб допомогти своїм учням (і, можливо, звільнити себе на час відпустки), ви вирішили написати невеликий додаток, який може оцінити вартість будинку в вашому районі на основі його розміру, місця розташування і т.д., а також за ціною схожих по параметрам будинків. Таким чином, ви записуєте кожен випадок продажу будинку у вашому місті протягом 3-х місяців. Для кожного будинку, ви записуєте купу деталей - кількість спалень, розмір в квадратних футах, місце розташування (район) і т.д. Але найголовніше, ви записуєте остаточну ціну продажу:

![Image](https://cdn-images-1.medium.com/max/1000/1*ZWYX9nwsDFaNOW4jOrHDkQ.png)

Це наша “training data.”

Використовуючи ці тренувальні дані, ми хочемо створити програму, яка може оцінити, скільки коштує будь-який інший будинок у вашому регіоні:

![Image](https://cdn-images-1.medium.com/max/800/1*V0OXzLOPtpU13MVVrlZJjA.png)

Це називається навчання на прецедентах. Ви знали за скільки кожен будинок проданий, іншими словами, ви знали відповідь на цю проблему і можете йти в зворотному напрямку, щоб з'ясувати логіку. Щоб зробити додаток, ви пропускаєте дані про кожний будинок через свій алгоритм машинного навчання. Алгоритм намагається з'ясувати, які обчислення потрібно зробити, щоб числа вийшли. Це як маючи відповідь на завдання з математики зі стертими усіма арифметичними символами:

![Image](https://cdn-images-1.medium.com/max/800/1*SihYXaJQS3T6tOwqJ6fzPw.png)

Виходячи з цього, ви можете з'ясувати, які математичні проблеми були на тесті? Ви знаєте, ви повинні "зробити щось" з номерами зліва, щоб отримати кожну відповідь справа. 
У навчанні на прецедентах, ви надаєте комп'ютеру змогу розрахувати і вияснити самостійно цю проблему для вас. І як тільки ви знаєте, які обчислення необхідні для вирішення цього набору проблем, ви можете відповісти на інші проблеми того ж типу!

### Неконтрольоване навчання 
Давайте повернемося до нашого початкового прикладу з агентом нерухомості. Що робити, якщо ви не знаєте ціну продажу для кожного будинку? Навіть якщо ви знаєте, розмір, розташування і т.д. кожного будинку, виявляється, ви все ще можете зробити деякі дійсно класні речі. Це називається неконтрольованим навчанням.

![Image](https://cdn-images-1.medium.com/max/800/1*mUJw2yL4-OBI25xUKS7_Bg.png)

Це ніби як хтось дає вам список номерів на аркуші паперу і каже: «Я не знаю, що означають ці цифри, але, можливо, ви можете з'ясувати, чи існує шаблон або група або щось - удачі". Так що можна зробити з цими даними? Для початку, ви могли б мати алгоритм, який автоматично ідентифікує різні сегменти ринку в ваших даних. Може бути, що ви дізнаєтеся, що покупцям житла в районі недалеко від місцевого коледжу справді подобаються на маленькі будинки з великою кількістю спалень, але покупці житла в передмісті надають перевагу 3-кімнатним будинкам з великою кількістю квадратних метрів. Знання про ці різні типи клієнтів може допомогти спрямувати ваші зусилля в маркетингу. Інша цікава річ, яку ви могли б зробити, це автоматично ідентифікувати будь-які сторонні будинки, які занадто відрізняються від всіх інших. Може бути, що ці сторонні будинки є великими особняками і ви можете зосередити своїх кращих продавців на цих справах, тому що вони мають великі комісійні.

Решта цього посту буде зосереджена на контрольованому навчанні, але це не тому, що навчання на прецедентах є менш корисним або цікавим. Насправді, неконтрольоване навчання набуває все більшого значення, оскільки алгоритми стають кращими, так як він може бути використаний без необхідності позначати дані з правильною відповіддю. Примітка: Є багато інших типів алгоритмів машинного навчання. Але це досить хороше місце для початку.

Це круто, але чи можливість оцінити вартість будинку дійсно розцінюється як "навчання"?
Так як ви людина, ваш мозок може підійти практично до будь-якою ситуації і дізнатися, як впоратися з цією ситуацією без будь-яких явних вказівок. Якщо ви продаєте будинок протягом тривалого часу, ви матимете інстинктивне "відчуття" правильної ціни для будинку, кращий спосіб продати цей будинок, вид клієнта, який був би зацікавлений і т.д. Мета сильного штучного інтелекту, щоб відтворити цю здатність за допомогою комп'ютерів.
Але в даний час алгоритми машинного навчання ще не такі хороші - вони працюють тільки тоді, коли зосереджені на дуже специфічну, обмежену проблему. Може бути, краще визначення для «навчання» в даному випадку є "з'ясувати рівняння для вирішення конкретного завдання, ґрунтуючись на деяких прикладах даних".

На жаль, "Машинне з'ясування рівняння для вирішення конкретного завдання, ґрунтуючись на деяких прикладах даних" насправді не підходяща назва. Таким чином, ми зупинились на "Machine Learning" замість цього. Звичайно, якщо ви читаєте це через 50 років у майбутньому, і ми з'ясували, алгоритм сильного штучного інтелекту, то весь цей пост буде здаватися трохи дивним. Тоді може, перестань читати і йди скажи своєму роботу помічнику піти зробити бутерброд, майбутня людино.

### Давайте напишемо цю програму! 
Так що, як би ви написати програму, щоб оцінити вартість будинку, як в нашому прикладі вище? Подумайте про це секунду, перш ніж читати далі. Якщо ви нічого про машинне навчання не знаєте, ви, ймовірно, спробуєте написати деякі основні правила для оцінки вартості будинку, щось таке:

```markdown
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = 0
  # In my area, the average house costs $200 per sqft
  price_per_sqft = 200
  if neighborhood == "hipsterton":
    # but some areas cost a bit more
    price_per_sqft = 400
  elif neighborhood == "skid row":
    # and some areas cost less
    price_per_sqft = 100
  # start with a base price estimate based on how big the place is
  price = price_per_sqft * sqft
  # now adjust our estimate based on the number of bedrooms
  if num_of_bedrooms == 0:
    # Studio apartments are cheap
    price = price — 20000
  else:
    # places with more bedrooms are usually
    # more valuable
    price = price + (num_of_bedrooms * 1000)
 return price
```

Якщо ви поморочитеся з цим протягом декількох годин, ви могли б щось таки зробити. Але ваша програма ніколи не буде досконалою, і буде складно її підтримувати в міру зміни цін. Не було б краще, якби комп'ютер міг би просто зрозуміти, як реалізувати цю функцію для вас? Чи вам не по барабану, що саме функція робить, якщо вона повертає правильні ціни:

```markdown
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = <computer, plz do some math for me>
  return price
```

Про цю проблему можна думати таким способом: ціна є смачним рагу, а інші інгредієнти - це кількість спалень, площа в квадратних футах і місцерозташування. Якщо ви могли б просто з'ясувати, скільки кожен інгредієнт впливає на кінцеву ціну, можливо, є точне співвідношення інгредієнтів для перемішування, щоб зробити остаточну ціну. Це могло б скоротити твою функцію (з усіма тими crazy if’s and else’s) до чогось дуже простого, як це:

```markdown
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
 price = 0
 # a little pinch of this
 price += num_of_bedrooms * .841231951398213
 # and a big pinch of that
 price += sqft * 1231.1231231
 # maybe a handful of this
 price += neighborhood * 2.3242341421
 # and finally, just a little extra salt for good measure
 price += 201.23432095
 return price
```

Зверніть увагу на магічні числа виділені жирним шрифтом - .841231951398213, 1231.1231231, 2.3242341421 і 201.23432095. Це наші ваги. Якби ми могли просто з'ясувати ідеальні ваги, щоб застосовувати їх для кожного будинку, наша функція могла б передбачити ціни на житло! Простим способом з'ясувати кращі ваги буде щось на зразок цього:

### Крок 1: 
Почніть з кожною вагою встановленою на 1,0:

```markdown
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = 0
  # a little pinch of this
  price += num_of_bedrooms * 1.0
  # and a big pinch of that
  price += sqft * 1.0
  # maybe a handful of this
  price += neighborhood * 1.0
  # and finally, just a little extra salt for good measure
  price += 1.0
  return price
```

### Крок 2: 
Пропускати кожен будинок, який ви знаєте, через вашу функцію і дивитися, на скільки далекий результат функції від правильної ціни для кожного будинку:

![Image](https://cdn-images-1.medium.com/max/1000/1*Dih1jJrDpqF0NJsWkA1qgw.png)

Наприклад, якщо перший будинок насправді був проданий за $ 250,000, але ваша функція припустила, що будинок проданий за $ 178,000, ви упустили $ 72,000 для цього одного будинку. А тепер складемо квадрат суми втрат на кожному будинку, які є у нашому наборі даних. Припустимо, що у наборі даних є 500 угод із продажу житла, тоді квадрат від втрат після роботи вашої функції для кожного будинку був цілих $ 86,123,373. Ось на скільки "неправильна" ваша функція в даний час.

Тепер, візьмемо загальну суму і розділимо її на 500, щоб отримати середнє значення помилки, для кожного будинку. Можеш назвати середнє значення помилки вартістю твоєї функції. Якщо б ви могли отримати вартість, яка дорівнює нулю, граючи з вагами, ваша функція була б ідеальною. Це означало б, що в будь-якому випадку, ваша функція ідеально пропонує ціну будинку на основі вхідних даних. Так що наша мета - отримати цю вартість, яка б була низькою на скільки можливо, застосовуючи різні ваги.

### Крок 3: 
Повторіть крок 2 знову і знову з кожною можливою комбінацією ваг. Якась комбінація ваг зробить вартість ближче до нуля. Коли ви знаходите ваги, які працюють, ви вирішили цю проблему!

### Час підірвати мозок 
Це досить просто, чи не так? Ну подумайте про те, що ви тільки що зробили. Ви взяли деякі дані, ви пропустили їх через три загальних, дійсно простих кроки, і в кінці отримали функцію, яка може вгадати ціну будь-якого будинка у вашому районі. Стережись, Zillow! Але ось ще кілька фактів, які підірвуть ваш розум:

1)	Дослідження в багатьох галузях (наприклад, лінгвістика / переклад) протягом останніх 40 років показали, що загальні алгоритми навчання, які "міксують (змішують) номер рагу" (фраза, яку я тільки що зробив) досягають кращих результатів, де реальні люди намагаються придумати докладні правила. "Німий" підхід машинного навчання в кінцевому підсумку перемагає людських експертів.

2)	Функція, яку ви отримали є абсолютно безглуздою. Вона навіть не знає, що таке "квадратні фунти" або "спальні". Все що вона знає, це те що їй потрібно розмішати в певній кількості ці цифри, щоб отримати правильну відповідь.

3)	Дуже ймовірно, що ви не будете мати ні найменшого уявлення, чому конкретний набір ваг буде працювати. Отже, ви тільки що написали функцію, яку ви насправді не розумієте, але вона реально працюватиме.

4)	Уявіть собі, що замість того, щоб приймати такі параметри, як "Квадратні фути" і "Кількість спалень", ваша функція передбачення прийняла масив чисел. Скажімо, кожне число визначає яскравість одного пікселя в зображенні, яке відзняте камерою, яка встановлена на верхній частині вашого автомобіля. Тепер давайте припустимо, що замість того, щоб виводити прогноз під назвою "ціна", функція виведе прогноз під назвою "градуси, щоб повернути кермо". Ви тільки що зробили функцію, яка може самостійно керувати автомобілем! 

Трохи божевільно, чи не так?

### А як щодо третього кроку, де необхідно "спробувати кожне число"? 
Добре, звичайно, ви не можете просто спробувати кожну комбінацію всіх можливих ваг, щоб знайти комбо, яке працює найкраще. Це було б буквально взяти назавжди, адже числа ніколи не закінчаться, щоб спробувати всі. Щоб уникнути цього, математики з'ясували багато розумних способів швидко знайти хороші значення для цих ваг без необхідності спробувати багато варіантів. Ось один із способів: По-перше, написати просте рівняння, яке представляє Крок № 2 вище:

![Image](https://cdn-images-1.medium.com/max/1000/1*4j82aAIUGQKKUmKcHLMWJQ.png)

Тепер давайте перепишемо таке ж рівняння, але з використанням математики машинного навчання (яку ви можете ігнорувати на даний момент):

![Image](https://cdn-images-1.medium.com/max/800/1*ZyboMOVQ5zOv0ZTC4a3usA.png)

θ відображає ваші поточні ваги. J (θ) означає 'ціну для поточних ваг’.

Це рівняння показує, наскільки неправильна наша функція для оцінки вартості ваг, які в даний час встановлені. Якщо графік це рівняння вартості для всіх можливих значень наших ваг для number_of_bedrooms і sqft, ми отримаємо графік, який може виглядати приблизно так:

![Image](https://cdn-images-1.medium.com/max/800/1*uorFgyflbSMtvfSo9hlI1A.png)

На цьому графіку найнижча синя точка, де наша ціна є найменшою - там наша функція є найменш неправильною. В найвищих точках, вона найбільш неправильна. Так що, якщо ми зможемо знайти ваги, які наблизять нас до найнижчої точки на цьому графіку, ми будемо мати нашу відповідь!

![Image](https://cdn-images-1.medium.com/max/800/1*prsH6EfJmFqdmFElj1Ht8g.png)

Тому ми просто повинні скорегувати наші ваги так щоб ми "спускалися з пагорба" на цьому графіку до найнижчої точки. Якщо ми будемо продовжувати робити невеликі коректування наших ваг, які завжди спрямовуватимуть нас у напрямку до найнижчіої точки, ми в кінцевому підсумку будемо там без того, щоб перепробувати безліч різних ваг. 

Якщо ви пам'ятаєте що-небудь від числення, ви, можливо, пам'ятаєте, що якщо взяти похідну від функції, вона дасть вам тангенс функції в будь-якій точці. Іншими словами, це говорить нам, який спосіб є низхідним для будь-якої заданої точки на нашому графіку. Ми можемо використовувати ці знання, щоб рухатися вниз.

Отже, якщо ми беремо часткову похідну нашої функції вартості відносно кожної з наших ваг, то ми можемо відняти це значення з кожної відповідної ваги. Це робить нас на один крок ближче до найнижчої точки графіка. Продовжуйте робити це, і врешті-решт ми досягнемо підніжжя височини і матимемо найкращі значення для наших ваг. (Якщо це не має сенсу, не хвилюйтеся і продовжуйте читання).

Це узагальнений короткий опис одного із способів знайти кращі ваги для функції вартості відомого як градієнтний спуск (batch gradient descent). Не бійтеся копати глибше, якщо ви зацікавлені у вивченні деталей.

При вирішенні реальних задач з використонням бібліотек машинного навчання, все це залишиться за кадром. Але все ж корисно мати хороше уявлення про те, що відбувається.

### Про що ще ти промовчав?

Трикроковий алгоритм, описаний вище називається множинною лінійною регресією (multivariative linear regression). Ви оцінюєте рівняння для лінії, яка описує всі дані про нерухомість. Потім використовуєте це рівняння для передбачення ціни нерухомості, яку раніше не бачили, на основі того, де ця нерухомість виявиться на вашій лінії. Це дійсно потужна ідея, за допомогою якої можна вирішувати реальні завдання.

Але хоча показаний мною підхід працює для простих випадків, він не універсальний. Одна з причин - вартість нерухомості не завжди на стільки проста, що описується безперервною лінією.

На щастя існує безліч способів впоратися з цим. Є багато інших алгоритмів машинного навчання, які можуть розібратися з нелінійними даними (наприклад нейронні мережі або SVM з ядрами). Так само існують більш розумні способи використання лінійної регресії, що дозволяють описувати складні закономірності. Базова ідея пошуку найкращих ваг залишається незмінною у всіх випадках.

Ще я проігнорував поняття перенавчання (overfitting). Легко отримати набір ваг, який буде відмінно працювати для передбачення нерухомості на тренувальних даних, але ніколи не спрацює для нового будинку, якого не було в тренувальних даних. Існують способи боротьби з цим (наприклад регуляризація) і використання крос-валідації). Вивчення того, як справлятися з цією проблемою, ключовий момент для успішного застосування машинного навчання.

Іншими словами, хоча базові принципи машинного навчання досить прості, потрібні певні навички та досвід для отримання хороших результатів за допомогою машинного навчання. Але це навик, який може освоїти будь-який розробник!

### Машинне навчання - це магія?
Коли ви бачите, на скільки просто техніки машинного навчання можуть бути застосовані до завдань, які виглядали дійсно складними (наприклад розпізнавання рукописного тексту), у вас виникає відчуття, що можна використовувати машинне навчання для вирішення будь-якої задачі і отримати відповідь, маючи потрібну кількість даних. Просто передаємо дані алгоритму і дивимося, як комп'ютер за помахом чарівної палички знаходить рівняння, що описують дані!

Але важливо пам'ятати, що машинне навчання працює, тільки якщо проблему можна вирішити за допомогою даних, які у вас є.

Наприклад, якщо ми побудуємо модель, яка передбачає вартість нерухомості на основі домашніх рослин, це не спрацює. Просто немає зв'язку між вирощуваними в будинку рослинами і його вартістю. Тому не важливо, як сильно ми намагаємося, комп'ютер не зможе знайти залежність.

![Image](https://cdn-images-1.medium.com/max/800/1*N6pxRoVoEoedFELL2HdxbA.png)

Тому, якщо експерт не може використовувати дані для вирішення проблеми, комп'ютер, ймовірно, теж не зможе. Замість цього, сфокусуємось на завданнях, які здатна вирішити людина, і було б класно, якщо комп'ютер зможе вирішити їх швидше.

### Як дізнатися більше про машинне навчання
З моєї точки зору, найбільша проблема машинного навчання зараз, це те, що вона зосереджена в основному в академічному середовищі і комерційних дослідницьких групах. Не так багато простого в розумінні матеріалу для людей, які хотіли б розширити кругозір не стаючи при цьому експертами. Але ситуація поліпшується з кожним днем.

[Курс Machine Learning](https://www.coursera.org/course/ml) Andrew Ng просто чудовий. Я дуже рекомендую почати з нього. Він повинен бути зрозумілий будь-якій людині зі ступенем в Комп'ютерних науках і для тих хто пам'ятає небагато математики.

Ще ви можете пограти з величезною кількістю алгоритмів машинного навчання використовуючи [scikit-learn](http://scikit-learn.org/stable/). Це python фреймворк, який реалізує "black box" версії стандартних алгоритмів.



